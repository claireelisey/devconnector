{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE } from './types'; // Get current user's profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create or update profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/profile', formData, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    if (!edit) {\n      history.push('/dashboard');\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Experience\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('/api/profile/experience', formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/claireouellette/Desktop/2_Development/devconnector/client/src/actions/profile.js"],"names":["axios","setAlert","GET_PROFILE","PROFILE_ERROR","UPDATE_PROFILE","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","createProfile","formData","history","edit","config","headers","post","push","errors","forEach","error","addExperience","put"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\n\nimport { GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE } from './types';\n\n// Get current user's profile\nexport const getCurrentProfile = () => async dispatch => {\n\ttry {\n\t\tconst res = await axios.get('/api/profile/me');\n\n\t\tdispatch({\n\t\t\ttype: GET_PROFILE,\n\t\t\tpayload: res.data\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: PROFILE_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status\n\t\t\t}\n\t\t});\n\t}\n};\n\n// Create or update profile\nexport const createProfile = (\n\tformData,\n\thistory,\n\tedit = false\n) => async dispatch => {\n\ttry {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t};\n\n\t\tconst res = await axios.post('/api/profile', formData, config);\n\n\t\tdispatch({\n\t\t\ttype: GET_PROFILE,\n\t\t\tpayload: res.data\n\t\t});\n\n\t\tdispatch(\n\t\t\tsetAlert(edit ? 'Profile Updated' : 'Profile Created', 'success')\n\t\t);\n\n\t\tif (!edit) {\n\t\t\thistory.push('/dashboard');\n\t\t}\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif (errors) {\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: PROFILE_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status\n\t\t\t}\n\t\t});\n\t}\n};\n\n// Add Experience\nexport const addExperience = (formData, history) => async dispatch => {\n\ttry {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t};\n\n\t\tconst res = await axios.put(\n\t\t\t'/api/profile/experience',\n\t\t\tformData,\n\t\t\tconfig\n\t\t);\n\n\t\tdispatch({\n\t\t\ttype: UPDATE_PROFILE,\n\t\t\tpayload: res.data\n\t\t});\n\n\t\tdispatch(setAlert('Experience added', 'success'));\n\n\t\thistory.push('/dashboard');\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif (errors) {\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: PROFILE_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status\n\t\t\t}\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}