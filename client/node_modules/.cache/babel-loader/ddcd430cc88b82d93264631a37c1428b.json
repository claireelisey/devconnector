{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Regsiter User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify(email, password);\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/claireouellette/Desktop/2_Development/devconnector/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACCC,gBADD,EAECC,aAFD,EAGCC,WAHD,EAICC,UAJD,QAKO,SALP;AAMA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC/C,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACvBJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACA;;AAED,MAAI;AACH,UAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAU,WAAV,CAAlB;AAEAJ,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAET,WADE;AAERU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAIA,GAPD,CAOE,OAAOC,GAAP,EAAY;AACbR,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAER;AADE,KAAD,CAAR;AAGA;AACD,CAjBM,C,CAmBP;;AACA,OAAO,MAAMY,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAMZ,QAAN,IAAkB;AACxE,QAAMa,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR;AADK,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AAEA,MAAI;AACH,UAAMT,GAAG,GAAG,MAAMX,KAAK,CAAC0B,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AAEAb,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAEX,gBADE;AAERY,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAIA,GAPD,CAOE,OAAOC,GAAP,EAAY;AACb,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACXA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAItB,QAAQ,CAACP,QAAQ,CAAC6B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACA;;AAEDvB,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAEV;AADE,KAAD,CAAR;AAGA;AACD,CA3BM,C,CA6BP;;AACA,OAAO,MAAM6B,KAAK,GAAG,CAACb,KAAD,EAAQC,QAAR,KAAqB,MAAMZ,QAAN,IAAkB;AAC3D,QAAMa,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR;AADK,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,KAAf,EAAsBC,QAAtB,CAAb;;AAEA,MAAI;AACH,UAAMT,GAAG,GAAG,MAAMX,KAAK,CAAC0B,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AAEAb,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAEX,gBADE;AAERY,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFL,KAAD,CAAR;AAIA,GAPD,CAOE,OAAOC,GAAP,EAAY;AACb,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACXA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAItB,QAAQ,CAACP,QAAQ,CAAC6B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACA;;AAEDvB,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAEV;AADE,KAAD,CAAR;AAGA;AACD,CA3BM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n\tREGISTER_SUCCESS,\n\tREGISTER_FAIL,\n\tUSER_LOADED,\n\tAUTH_ERROR\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n\tif (localStorage.token) {\n\t\tsetAuthToken(localStorage.token);\n\t}\n\n\ttry {\n\t\tconst res = await axios.get('/api/auth');\n\n\t\tdispatch({\n\t\t\ttype: USER_LOADED,\n\t\t\tpayload: res.data\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: AUTH_ERROR\n\t\t});\n\t}\n};\n\n// Regsiter User\nexport const register = ({ name, email, password }) => async dispatch => {\n\tconst config = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t};\n\n\tconst body = JSON.stringify({ name, email, password });\n\n\ttry {\n\t\tconst res = await axios.post('/api/users', body, config);\n\n\t\tdispatch({\n\t\t\ttype: REGISTER_SUCCESS,\n\t\t\tpayload: res.data\n\t\t});\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif (errors) {\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: REGISTER_FAIL\n\t\t});\n\t}\n};\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n\tconst config = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t};\n\n\tconst body = JSON.stringify(email, password);\n\n\ttry {\n\t\tconst res = await axios.post('/api/users', body, config);\n\n\t\tdispatch({\n\t\t\ttype: REGISTER_SUCCESS,\n\t\t\tpayload: res.data\n\t\t});\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif (errors) {\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: REGISTER_FAIL\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}